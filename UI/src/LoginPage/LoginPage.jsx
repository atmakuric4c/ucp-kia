import React from "react";
import { Link } from "react-router-dom";
import { connect } from "react-redux";
import { userActions, alertActions } from "../_actions";
import { toast } from 'react-toastify';
import { history, authHeader, encryptRequest, decryptResponse } from "../_helpers";
import config from 'config';
import { validation } from "../_helpers/passwordPolicy";
import PageLoader from '../_components/PageLoader';
import ReactTooltip from "react-tooltip";

const env = require('./../../env');

let questionsArray = [];
class LoginPage extends React.Component {
    constructor(props) {
        super(props);

        let reset;        

        let sessionOut = sessionStorage.getItem("sessionOut");
        let showSessionMsg = "";

        if (sessionOut) {
            sessionStorage.removeItem("sessionOut");
            showSessionMsg = true;
        }

        if (window.location.href.indexOf("reset=") > -1) {
            reset = window.location.href.split("reset=")[1];
        }

        this.state = {
    		config,
            questions: false,
            newQuestions: false,
            randomQuestions: [],
            showSessionMsg: showSessionMsg,
            login_request_inprocess: false,
            reset_pswd_request_inprocess: false,
            email: "",
            loginMaskMobile: "",
            mobile: "",
            password: "",
            captcha: "",
            backup_user_details: "",
            passwordExpired: 0,
            qrcode: "",
            showQRCode: false,
            pswdGeneratorShow: false,
            autoGeneratedPassword: "",
            user: {
                email: ''
            },
            newUser: {
                company_name: '',
                email: '',
                mobile: '',
                password: '',
                confirmpassword: ''
            },
            resetPassword: {
                hash: reset,
                newPassowrd: "",
                confirmPassowrd: "",
                questions:[]
            },
            submitted: false,
            invalidUser: false,
            credentials: [],
            pageType: (reset ? 3 : 0),
            captchaCode: this.generateCaptcha(),
            resendOtpCount: 0,
            loginType : "",
            azureAdStatus : "",
            adMessage : ""
        };

        this.handleChange = this.handleChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);

        this.loginWithOtpclickHandler = this.loginWithOtpclickHandler.bind(this);
        this.forgotPswd = this.forgotPswd.bind(this);
        this.gotoLogin = this.gotoLogin.bind(this);
        this.newUserRegister = this.newUserRegister.bind(this);
        this.handleForgotPasswordChange = this.handleForgotPasswordChange.bind(this);
        this.handleForgotPasswordSubmit = this.handleForgotPasswordSubmit.bind(this);
        this.handleRegisterChange = this.handleRegisterChange.bind(this);
        this.handleRegisterSubmit = this.handleRegisterSubmit.bind(this);
        this.refreshCaptcha = this.refreshCaptcha.bind(this);
        this.resetPasswordClick = this.resetPasswordClick.bind(this);
        this.validateSecurityQuestions = this.validateSecurityQuestions.bind(this);
        this.resetPswdChange = this.resetPswdChange.bind(this);
        this.adLogin = this.adLogin.bind(this);

        this.validateResetPassword();
        if(typeof this.state.resetPassword.hash != 'undefined'){
        	this.getSecurityQuestions();
        }

        if(window.location.href.indexOf("loginType=") != -1){
            this.validateAdLogin();
        }
    }

    validateAdLogin () {
        let hrefurl = window.location.href,
            loginType = hrefurl.split("loginType=")[1],
            code = hrefurl.split("code=")[1],
            client_info = hrefurl.split("client_info=")[1],
            session_state = hrefurl.split("session_state=")[1];

        loginType = loginType.split("&")[0];
        code = code.split("&")[0];
        session_state = session_state.split("&")[0];
        client_info = client_info.split("&")[0];
        this.state.show_login_loader = true;
        this.state.loginType = loginType;

        if(hrefurl.indexOf("loginType=") != -1){	
            const requestOptions = {
                method: "POST",
                credentials: 'include',
                mode: "same-origin",
                redirect: 'follow',
                headers: { 
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                body: encryptRequest({
                    code, session_state, client_info
                })
            };

            fetch(`${config.apiUrl}/api/adLogin`, requestOptions).then(
                response => {
                    return response.text().then(text => {
                        let user = decryptResponse(text);
                        if (user.success) {
                            user = JSON.stringify(user);
                            localStorage.setItem("user", encryptRequest(user));
                            localStorage.setItem("showVersion", "");
                            toast.success("Login successful");
                            this.setState({
                                show_login_loader: false
                            });
                            setTimeout(() => {
                                window.history.pushState('ITS Universal Cloud Platform', 'Title', window.location.href.split('?')[0]);
                                window.location.href = window.location.origin;
                            }, 500);
                        }
                        else {
                            window.history.pushState('ITS Universal Cloud Platform', 'Title', window.location.href.split('?')[0]);
                            toast.error(user.errmsg);
                            this.setState({
                                azureAdStatus: 'error', 
                                adMessage: user.errmsg,
                                show_login_loader: false
                            });
                        }
                    });
                }
            ).catch(error => {
                if (error) {
                    error = error.toString();
                }
                window.history.pushState('ITS Universal Cloud Platform', 'Title', window.location.href.split('?')[0]);
                this.setState({
                    azureAdStatus: 'error', 
                    adMessage: error,
                    show_login_loader: false
                });
                toast.error(error);
            });
        }
    }

    adLogin(){
    	window.location.href = config.apiUrl+"/azure/adLogin";
    }

    getSecurityQuestions() {
        var requestOptions = {
            method: 'GET',
            headers: { ...authHeader(), 'Content-Type': 'application/json' }
        };

        fetch(`${config.apiUrl}/securityQuestions/random/user/${this.state.resetPassword.hash}`, requestOptions).then(response => {
            return response.text().then(text => {
                let data = text && JSON.parse(text);

                if (data && data.data.security_question_enable == 1) {
                    this.setState({
                        questions: true
                    });
                }
                if (data && data.data) {
                    this.setState({
                        randomQuestions: data.data.questions
                    });
                }
            });
        });
    }

    validateResetPassword() {
        const { dispatch } = this.props;
        if (this.state.resetPassword.hash) {
            if (localStorage.user) {
                toast.error("Invalid action, User is already logged in and trying to reset the password!");
                history.push("/#/");
                setTimeout(function () {
                    location.reload();
                }, 3000);
            }
            else {
                window.history.pushState({}, document.title, "#/login");
                dispatch(userActions.validateResetPasswordRequest(this.state.resetPassword.hash));
            }
        }
    }

    handleChange(e) {
        const { name, value } = e.target;
        this.setState({ [name]: value });
    }

    handleSubmit(e) {
        if (this.state.email == "") {
            toast.error("Please enter Email");
            return false;
        }
        else if (this.state.password == "") {
            toast.error("Please enter Password");
            return false;
        }
        else if (this.state.captcha == "") {
            toast.error("Please enter Captcha");
            return false;
        }
        else if (this.state.captcha != this.state.captchaCode) {
            toast.error("Please enter valid captcha");
            return false;
        }

        if (this.state.loginMaskMobile && !this.state.mobile) {
            toast.error("Please enter registered mobile number to login !");
            return false;
        }

        if (e)
            e.preventDefault();

        this.setState({ submitted: true });
        const { email, password, captcha } = this.state;
        const { dispatch } = this.props;
        if (email && password) {

            let loginObj = { email: email, password: password };

            if (this.state.loginMaskMobile)
                loginObj.mobile = this.state.mobile;

            this.triggerLoginApi(loginObj);
            //dispatch(userActions.login(email, password));
        }
    }

    login_request_processed() {
        this.setState({
            login_request_inprocess: false
        });
    }

    triggerLoginApi(frmData) {
        frmData.company_entity = "cloud";
        this.setState({
            login_request_inprocess: true
        });
        const requestOptions = {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: encryptRequest(frmData)
        };

        fetch(`${config.apiUrl}/api/login`, requestOptions).then(
            response => this.handleLoginApiResponse(response)
        ).catch(error => {
            if (error) {
                error = error.toString();
            }
            toast.error(error);
            this.login_request_processed();
        });
    }

    handleLoginApiResponse(response) {
        return response.text().then(text => {
            let user = decryptResponse(text);

            if (user.success) {
                if (this.state.loginMaskMobile) {
                    user.data.otp_status = 1;
                }

                if (typeof user.data.success != 'undefined' && user.data.success == false) {
                	toast.error(user && user.data && user.data.message ? user.data.message : "Unable to Process Login Request");
                	this.login_request_processed();
                    return;
                }
                else if (user.data.otp_status) {
                    this.setState({
                        pageType: 4,
                        qrcode: user.gcode.qrcode,
                        qrcode_secret: user.gcode.secret,
                        backup_user_details: user
                    });
                }
                else if (user.data.google_auth_login) {
                    this.setState({
                        pageType: 5,
                        showQRCode: true,
                        qrcode: user.gcode.qrcode,
                        qrcode_secret: user.gcode.secret,
                        backup_user_details: user
                    });
                }
                else {
                    user = JSON.stringify(user);
                    localStorage.setItem("user", encryptRequest(user));
                    localStorage.setItem("showVersion", "");
                    window.location.href = window.location.origin;
                }
            } else {
                if (user.ispasswordexpired) {
                    this.setState({
                        pageType: 1,
                        passwordExpired: 1
                    });
                }
                else if (user.count >= 3) {
                    let isFirstMobile = this.state.loginMaskMobile;
                    this.setState({
                        loginMaskMobile: user.mobile
                    });

                    if (!isFirstMobile && user.mobile) {
                        toast.error("Please enter valid registered mobile number to login !");
                        this.login_request_processed();
                        return;
                    }
                }

                toast.error(user && user.message ? user.message : "Unable to Process Login Request");
            }
            this.login_request_processed();
        });
    }

    disableResendOTP = () => {
        setTimeout(() => {
            this.setState({
                setIntCount: 30
            });
        }, 0);

        if (this.state.resendOtpCount >= 3) {
            this.setState({
                hideResendOtp: true
            });
            return;
        }

        window.setIntervalForOTPSeconds = setInterval(this.setResendOTPSeconds, 1000);
    }

    setResendOTPSeconds = () => {
        this.setState({
            setIntCount: this.state.setIntCount - 1
        });

        if (this.state.setIntCount == 0) {
            clearInterval(window.setIntervalForOTPSeconds);
        }
    }

    /*Start: Resend OTP*/
    resendOTPClick = (e) => {
        e.preventDefault();

        this.setState({
            otp_resent_request_inprocess: true,
            resendClicked: true
        });

        const requestOptions = {
            method: "POST",
            headers: { Authorization: "Bearer " + this.state.backup_user_details.token, 'Content-Type': 'application/json' },
            body: JSON.stringify({ userid: this.state.backup_user_details.data.id })
        };

        fetch(`${config.apiUrl}/secureApi/resendOtp`, requestOptions).then(
            response => this.handleResendOTPApiResponse(response)
        );
    }

    handleResendOTPApiResponse(response) {
        return response.text().then(text => {

            const user = (text && JSON.parse(text));

            if (user.status == "success") {
                this.setState({
                    resendOtpCount: this.state.resendOtpCount + 1
                });

                setTimeout(() => {
                    this.disableResendOTP();
                }, 0);

                toast.success("OTP has resent to Registered Email and Mobile !");
            } else {
                toast.error(user.message ? user.message : "Unable to resend OTP !");
            }

            this.setState({
                otp_resent_request_inprocess: false
            });

        });
    }
    /*End: Resend OTP*/

    loginWithOTPClick = (e) => {
        e.preventDefault();

        if (!$("#txt_login_otp").val()) {
            toast.error("Please enter OTP");
            return;
        }

        let loginObj = { userid: this.state.backup_user_details.data.id, otp: $("#txt_login_otp").val() };

        if (this.state.loginMaskMobile) {
            loginObj.mobile = this.state.mobile;
        }

        this.triggerLoginWithOTPApi(loginObj);
    }

    triggerLoginWithOTPApi(frmData) {
        this.setState({
            login_request_inprocess: true
        });
        const requestOptions = {
            method: "POST",
            //headers: { "Content-Type": "application/json" },
            headers: { Authorization: "Bearer " + this.state.backup_user_details.token, 'Content-Type': 'application/json' },
            body: JSON.stringify(frmData)
        };

        fetch(`${config.apiUrl}/secureApi/userOtpVerify`, requestOptions).then(
            response => this.handleLoginWithOTPApiResponse(response)
        ).catch(error => {
            if (error) {
                error = error.toString();
            }
            toast.error(error);
            this.login_request_processed();
        });
    }

    handleLoginWithOTPApiResponse(response) {
        return response.text().then(text => {
            const user = (text && JSON.parse(text));

            if (user.status == "success") {
                if (this.state.backup_user_details.data.google_auth_login) {
                    this.setState({
                        pageType: 5,
                        showQRCode: true
                    });
                }
                else {
                    localStorage.setItem("user", 
                        encryptRequest(JSON.stringify(this.state.backup_user_details)));
                    localStorage.setItem("showVersion", "");
                    window.location.href = window.location.origin;
                }
            } else {
                toast.error(user.message);
            }
            this.login_request_processed();
        });
    }

    resetPswdChange(event) {
        const { name, value } = event.target;
        const { resetPassword } = this.state;
        this.setState({
            resetPassword: {
                ...resetPassword,
                [name]: value
            }
        });
    }

    validateSecurityQuestions(event) {

        event.preventDefault();

        const form = event.target;
        const data = new FormData(form);

        this.setState({
            res: this.stringifyFormData(data),

        });
    }

    stringifyFormData = (fd) => {
        var self = this;
        let data = {};
        for (let key of fd.keys()) {
            data[key] = fd.get(key);
            //form_data.append(key, fd[key]);
        }

        let postData = [];

        for (let key of fd.keys()) {
            postData.push({ question_id: key, answer: fd.get(key) });
        }
        questionsArray = postData;

        const requestOptions = {
            method: 'POST',
            headers: { ...authHeader(), 'Content-Type': 'application/json' },
            body: JSON.stringify(postData)
        };

        return fetch(`${config.apiUrl}/securityQuestions/verify/user/${this.state.resetPassword.hash}`, requestOptions).then(this.handleSecurityQuestionsResponse);

    }

    handleSecurityQuestionsResponse = (response) => {
        return response.text().then(text => {
            const data = text && JSON.parse(text);
        

            if (data.data.questions.length == 0) {
                this.setState({
                    questions : false
                });
            }
            else{
                this.setState({
                    newQuestions: true,
                    randomQuestions: data.data.questions
                });
            }
         
        });
    }



    resetPasswordClick(e) {
        e.preventDefault();

        let userPassword = this.state.resetPassword.newPassowrd;
        let userCPassword = this.state.resetPassword.confirmPassowrd;

        if (userPassword == "") {
            toast.error("Please enter Password");
            return false;
        }

        let validatPasswordPoliy = validation.c4cCheckPasswordPolicy(
            userPassword,
            "",
            "",
            "",
            "",
            "",
            "",
            ["ucp"]);

        if (!validatPasswordPoliy[0]) {
            toast.error(validatPasswordPoliy[1]);
            return false;
        }
        else if (!userCPassword) {
            toast.error("Please enter Confirm Password");
            return;
        }
        else if (userPassword !== userCPassword) {
            toast.error("Password and Confirm Password don't match");
            return;
        }
        else {
            const { dispatch } = this.props;
            if (this.state.resetPassword && this.state.resetPassword.confirmPassowrd) {
                this.setState({
                    reset_pswd_request_inprocess: true
                });

                const requestOptions = {
                    method: 'POST',
                    headers: { ...authHeader(), 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        hash: this.state.resetPassword.hash,
                        userPassword: this.state.resetPassword.newPassowrd,
                        userCPassword: this.state.resetPassword.confirmPassowrd,
                        questions: questionsArray,
                    })
                };

                return fetch(`${config.apiUrl}/api/resetPassword`, requestOptions).then(this.handleResetPasswordResponse);

                //dispatch(userActions.resetNewPasswordRequest(this.state.resetPassword.hash, this.state.resetPassword.newPassowrd, this.state.resetPassword.confirmPassowrd));
            }
        }
    }

    handleResetPasswordResponse = (response) => {
        return response.text().then(text => {
            this.setState({
                reset_pswd_request_inprocess: false
            });

            const data = text && JSON.parse(text);
            if (data && data.status == "success") {
                toast.success(data.message ? data.message : "Password Reset Successful.");
                history.push("/#/");
                setTimeout(function () {
                    location.reload();
                }, 2000);
            }
            else {
                toast.error(data.message ? data.message : "Unable to Reset Password!");
            }

        });
    }

    handleForgotPasswordChange(event) {
        const { name, value } = event.target;
        const { user } = this.state;
        this.setState({
            user: {
                ...user,
                [name]: value
            }
        });
    }

    handleForgotPasswordSubmit(event) {
        if (this.state.user.email == "") {
            toast.error("Please enter Registered Email");
            return false;
        }

        if (event)
            event.preventDefault();

        this.setState({ submitted: true });
        const { user } = this.state;
        const { dispatch } = this.props;
        if (user.email) {
            dispatch(userActions.forgotpass(user));
        }
    }

    handleRegisterChange(event) {
        const { name, value } = event.target;

        if (name == "mobile") {
            let charCode = value.charCodeAt(value.length - 1);
            if (charCode > 31 && (charCode < 48 || charCode > 57)) {
                return false;
            }

            if (value.length > 10) {
                return false;
            }
        }

        const { newUser } = this.state;
        this.setState({
            newUser: {
                ...newUser,
                [name]: value
            }
        });
    }

    handleRegisterSubmit(event) {
        if (this.state.newUser.company_name == "") {
            toast.error("Please enter Company Name");
            return false;
        }
        else if (this.state.newUser.email == "") {
            toast.error("Please enter Email");
            return false;
        }
        else if (!(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(this.state.newUser.email))) {
            toast.error("Please enter valid Email");
            return false;
        }
        else if (this.state.newUser.mobile == "") {
            toast.error("Please enter Mobile");
            return false;
        }
        else if (this.state.newUser.mobile.length != 10) {
            toast.error("Mobile number should be 10 digits");
            return false;
        }

        let validatPasswordPoliy = validation.c4cCheckPasswordPolicy(
            this.state.newUser.password,
            "",
            "",
            "",
            this.state.newUser.mobile,
            this.state.newUser.email,
            this.state.newUser.company_name,
            ["ucp"]);

        if (!validatPasswordPoliy[0]) {
            toast.error(validatPasswordPoliy[1]);
            return false;
        }
        else if (!this.state.newUser.confirmpassword) {
            toast.error("Please enter Confirm Password");
            return;
        }
        else if (this.state.newUser.password != this.state.newUser.confirmpassword) {
            toast.error("Password confirmation doesn't match");
            return false;
        }

        if (event)
            event.preventDefault();

        this.setState({ submitted: true });
        const { newUser } = this.state;
        const { dispatch } = this.props;
        if (newUser.company_name && newUser.email && newUser.mobile && newUser.password) {
            newUser.company_entity = "cloud";
            dispatch(userActions.register(newUser));
        }
    }

    loginWithOtpclickHandler() {
        this.setState({
            pageType: 3
        });
    }

    forgotPswd() {
        this.setState({
            pageType: 1
        });
    }

    gotoLogin() {
        this.setState({
            captcha: "",
            captchaCode: this.generateCaptcha(),
            pageType: 0
        });
    }

    newUserRegister() {
        this.setState({
            pageType: 2
        });
    }

    generateCaptcha() {
        var alpha = new Array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 1, 2, 3, 4, 5, 6, 7, 8, 9, 0);
        //,'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'
        var i;
        for (i = 0; i < 6; i++) {
            var a = alpha[Math.floor(Math.random() * alpha.length)];
            var b = alpha[Math.floor(Math.random() * alpha.length)];
            var c = alpha[Math.floor(Math.random() * alpha.length)];
            var d = alpha[Math.floor(Math.random() * alpha.length)];
            var e = alpha[Math.floor(Math.random() * alpha.length)];
            var f = alpha[Math.floor(Math.random() * alpha.length)];
        }

        return (a ? a : 'A') + (b ? b : 'B') + (c ? c : '1') + (d ? d : '2') + (e ? e : '3');
    }

    refreshCaptcha() {
        this.setState({
            captcha: "",
            captchaCode: this.generateCaptcha()
        })
    }

    submitFormLogin = (e) => {
        if (event.key === 'Enter') {
            this.handleSubmit(e);
        }
    }

    submitFormForgotPassword = (e) => {
        if (event.key === 'Enter') {
            this.handleForgotPasswordSubmit(e);
        }
    }

    keyDownEnterSecretKey = (e) => {
        if (event.key === 'Enter') {
            this.loginWithQRCodeClick(e);
        }
    }

    submitFormRegistration = (e) => {
        if (event.key === 'Enter') {
            this.handleRegisterSubmit(e);
        }
    }

    submitFormOTP = (e) => {
        if (event.key === 'Enter') {
            this.loginWithOTPClick(e);
        }
    }

    /*Start: QR CODE Validation*/

    resetWithQRCodeClick = (e) => {
        this.setState({
            pageType: 6
        });

        this.setState({
            otp_resent_request_inprocess: 0
        });

        const requestOptions = {
            method: "POST",
            headers: { Authorization: "Bearer " + this.state.backup_user_details.token, 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: this.state.backup_user_details.data.email })
        };

        fetch(`${config.apiUrl}/api/sendOtp`, requestOptions).then(
            response => this.handleResetQRCodeOTPApiResponse(response)
        );
    }

    handleResetQRCodeOTPApiResponse(response) {
        return response.text().then(text => {

            const user = (text && JSON.parse(text));

            if (user.success) {
                this.setState({
                    otp_resent_request_inprocess: 2
                });
                toast.success("OTP has sent to Registered Email and Mobile !");
            } else {
                this.setState({
                    otp_resent_request_inprocess: 1
                });
                toast.error(user.message ? user.message : "Unable to send OTP !");
            }


        });
    }

    loginWithQRCodeClick = (e) => {
        e.preventDefault();

        if (!$("#txt_login_Secret_Key").val()) {
            toast.error("Please enter Secret Key");
            return;
        }

        let loginObj = { email: this.state.backup_user_details.data.email, secret: this.state.qrcode_secret, securityCode: $("#txt_login_Secret_Key").val() };

        this.triggerLoginWithQRCodeApi(loginObj);
    }

    triggerLoginWithQRCodeApi(frmData) {
        this.setState({
            login_request_inprocess: true
        });
        const requestOptions = {
            method: "POST",
            headers: { Authorization: "Bearer " + this.state.backup_user_details.token, 'Content-Type': 'application/json' },
            body: JSON.stringify(frmData)
        };

        fetch(`${config.apiUrl}/api/verifyGoogleCode`, requestOptions).then(
            response => this.handleLoginWithQRCodeApiResponse(response)
        ).catch(error => {
            if (error) {
                error = error.toString();
            }
            toast.error(error);
            this.login_request_processed();
        });
    }

    handleLoginWithQRCodeApiResponse(response) {
        return response.text().then(text => {
            const user = (text && JSON.parse(text));

            if (user.success) {
                localStorage.setItem("user", 
                    encryptRequest(JSON.stringify(this.state.backup_user_details)));

                localStorage.setItem("showVersion", "");
                window.location.href = window.location.origin;
            } else {
                toast.error("Incorrect Google Auth Code, Sync time in Google Authenticator App Settings!");
                //toast.error(user.message);
            }
            this.login_request_processed();
        });
    }

    resetQRCodeClick = (e) => {
        e.preventDefault();

        if (!$("#txt_otp_reset_QRCode").val()) {
            toast.error("Please enter OTP");
            return;
        }

        let frmData = { email: this.state.backup_user_details.data.email, otp: $("#txt_otp_reset_QRCode").val() };

        this.setState({
            reset_qrcode_request_inprocess: true
        });

        const requestOptions = {
            method: "POST",
            headers: { Authorization: "Bearer " + this.state.backup_user_details.token, 'Content-Type': 'application/json' },
            body: JSON.stringify(frmData)
        };

        fetch(`${config.apiUrl}/api/reset2FA`, requestOptions).then(
            response => this.handleResetQRCodeApiResponse(response)
        ).catch(error => {
            if (error) {
                error = error.toString();
            }
            toast.error(error);

            this.setState({
                reset_qrcode_request_inprocess: false
            });
        });
    }

    handleResetQRCodeApiResponse(response) {
        return response.text().then(text => {
            const user = (text && JSON.parse(text));

            if (user.success) {
                this.state.backup_user_details.gcode.qrcode = user.qrcode;
                this.state.backup_user_details.gcode.secret = user.secret;

                this.setState({
                    pageType: 5,
                    qrcode: user.qrcode,
                    qrcode_secret: user.secret,
                    backup_user_details: this.state.backup_user_details
                });
            } else {
                toast.error(user.message ? user.message : "Unable reset Google Authenticator QR Code, Please try again !");
            }

            this.setState({
                reset_qrcode_request_inprocess: false
            });

        });
    }
    /*End:  QR CODE Validation*/

    /*Start: Password Generator*/
    pswdGeneratorClick = (e) => {
        this.setState({
            pswdGeneratorShow: !this.state.pswdGeneratorShow
        });

        if (!this.state.pswdGeneratorShow) {
            this.autoGeneratedPasswordClick();
        }
    }

    autoGeneratedPasswordClick = () => {
        let newPassword = validation.generatePassword();

        this.setState({
            autoGeneratedPassword: newPassword
        });
    }
    /*End: Password Generator*/

    render() {
        const { loggingIn } = this.props;
        const { email, mobile, password, captcha } = this.state;
        const { forgotpassing } = this.props;
        const { user, submitted, newUser, resetPassword } = this.state;
        const { registering } = this.props;
        let is_local = env.env === 'local';        

        return (
            <React.Fragment>
                {/*<div className={`login-check-old-version ${localStorage.user ? 'd-none' : ''}`}>
                    <a href="https://app.cloud4c.com/" target="_blank">Click here</a> to view the Earlier Version!
            </div>*/}
                <div className="header">
	                <div className="App-logo">
	                  {/*<h5 className="header-text mt-1">{this.state.user.data.clientid === this.state.user.data.GOBEAR_CLIENT_ID ?<img src="/src/img/gobear_white.png" />:""}<img className="p-0" src="/src/img/blue-logo.png" />Universal Cloud Platform</h5>*/}
	                  <div className="row">
		                  <div className="col-sm-2 m-t-xs">
		                  	<img className="p-0" src="/src/img/cloud-4c-white.png" />
		                  </div>
		                  <div className="col-sm-8 m-t-xs">
		                  	<h5 className="header-text mt-1">Universal Cloud Platform</h5>
		                  </div>
	                  </div>
	                </div>
                </div>
                <div className={`login-module bg-dark ${localStorage.user ? 'd-none' : ''}`}>
                    <div className="full-width row no-gutters align-items-center">
                        {/*<div className="col-md-6 login-banner">
                            <div className="login-logo"><img src="/src/img/blue-logo.png" /></div>
                        </div>*/}
                        {this.state.pageType == 0 ?
                    		<React.Fragment>
	                            <div className="col-md-12">
	                                <div className="login-container">
	                                {!this.state.loginType && 
	                                	<React.Fragment>
		                                    {/*<div className="text-center login-announcement mb-3">
		                                        As per security patch update, You need to reset your login password and authenticate using google authenticator app!
		                            <a className="anch-doc-link pt-2" href="/src/docs/Universal Cloud Portal Sign-In Guide.pdf" target="_blank">Check for Sign-In Guide
		                            <i className="fas fa-external-link-alt pl-2"></i>
		                                        </a>
		                                    </div>*/}
		                                    <div className=" no-border">
		                                        <div className="text-center py-2">
		                                            <h4 className="color-black">Sign-In To Universal Cloud</h4>
		                                        </div>
		                                    </div>
		                                    {true ? <div className="card-body" onKeyDown={this.submitFormLogin} >
		                                        <div className="card-block pt-0">
		                                            <div className="form-horizontal">
		                                                <div className="form-group position-relative">
		                                                    <input type="text" required autoComplete="off" className="form-control input-field input-md round" placeholder="Enter Email" name="email" value={email} onChange={this.handleChange} />
		                                                </div>
		                                                <div className="form-group position-relative">
		                                                    <div className="row">
		                                                        <div className="col-md-8">
		                                                            <input type="password" required autoComplete="off" className="form-control input-field input-md round" placeholder="Enter Password" name="password" value={password} onChange={this.handleChange} />
		                                                        </div>
		                                                        <div className="col-md-4 p-0">
		                                                            <div className="login-text text-right"><a className="text-sm cursor-pointer-new mr-3" style={{ textDecoration: "underline" }} onClick={this.forgotPswd}>Forgot Password? </a></div>
		                                                        </div>
		                                                    </div>
		                                                </div>
		                                                <div className="form-group position-relative">
		                                                    <div className="row">
		                                                        <div className="col-md-8">
		                                                            <input type="text" required autoComplete="off" className="form-control input-field input-md round" id="user-password" placeholder="Enter the Captcha" name="captcha" value={captcha} onChange={this.handleChange} />
		                                                        </div>
		
		                                                        <div className="col-md-4 pl-0">
		                                                            <div className="captcha-wrapper form-control input-field-capcha input-md round">
		                                                                <span>{this.state.captchaCode}</span>
		                                                                <i className="fas fa-sync btn-refresh-captcha" onClick={this.refreshCaptcha}></i>
		                                                            </div>
		                                                        </div>
		                                                    </div>
		                                                </div>
		                                                {this.state.loginMaskMobile &&
		                                                    <div className="form-group position-relative">
		                                                        <input type="text" required autoComplete="off" className="form-control input-field input-md round" placeholder={this.state.loginMaskMobile} name="mobile" value={mobile} onChange={this.handleChange} />
		                                                    </div>}
		                                                <div className="row">
		                                                    <div className="col-5">
		                                                        <button type="submit"
		                                                            className={"btn btn-blue btn-md login-btn " + (this.state.login_request_inprocess ? "no-access" : "")} disabled={this.state.login_request_inprocess ? true : false}
		                                                            onClick={this.handleSubmit}>
		                                                            {this.state.login_request_inprocess && (
		                                                                <i className="fas fa-circle-notch icon-loading"></i>
		                                                            )}
		                                                            Login
			                                                    </button>
		                                                    </div>
		                                                    <div className="col-7 text-right">
		                                                        {this.state.showSessionMsg &&
		                                                            <div className="user-session-expired">
		                                                                User session expired!
		                                                        </div>
		                                                        }
		                                                    </div>
		                                                    {/*<div className="col-7 text-right">
		                                                    <button type="submit" className="d-none btn btn-primary btn-md login-btn" onClick={this.loginWithOtpclickHandler}><i className="icon-unlock2"></i>Login With OTP</button>
		                                                </div>*/}
		                                                </div>
		                                                {/*<div className="row">
			                                                <div className="col-5">
			                                                    <hr/>
			                                                </div>
			                                                <div className="col-2">
			                                                    (or)
			                                                </div>
			                                                <div className="col-5">
			                                                    <hr/>
			                                                </div>
			                                            </div>
			                                            <div className="row">
			                                                <div className="col-12 text-center">
				                                                <button type="submit"
			                                                        className="btn btn-blue btn-md login-btn "
			                                                        onClick={this.adLogin}>
			                                                        Login
			                                                    </button>
			                                                </div>
			                                            </div>*/}
		                                                {/*<div className="row new-registeration-wrapper">
		                                                    <div className="col-12 reg-child-wrapper cursor-pointer" onClick={this.newUserRegister}>
		                                                        <a className="card-link font-weight-normal reg-links cursor-pointer-new">
		                                                            <strong>New User? </strong>
		                                                            <span style={{ paddingLeft: "5px", textDecoration: "underline" }} className="reg-links font-weight-bold">Register</span>
		                                                        </a>
		                                                    </div>
		                                                </div>*/}
		                                            </div>
		                                        </div>
		                                    </div>
	                                    : <div className="row">
	                                    <div className="col-12 text-center">
	                                        <button type="submit"
	                                            className="btn btn-blue btn-md login-btn "
	                                            onClick={this.adLogin}>
	                                            Login
	                                        </button>
	                                    </div>
	                                </div>}
	                                    </React.Fragment>}
		                                {this.state.loginType == 'adLogin' && 
		                                	<React.Fragment>
	                                        { this.state.show_login_loader ?<PageLoader />: null}
		                                	{this.state.adMessage}
	                                        {this.state.azureAdStatus == 'error' && <div className="row">
		                                        <div className="col-12 text-center">
		                                            <button type="submit"
		                                                className="btn btn-blue btn-md login-btn "
		                                                onClick={this.adLogin}>
		                                                Login
		                                            </button>
		                                        </div>
		                                    </div>}
		                                </React.Fragment>}
	                                </div>
	                            </div>
	                            {false && <div className="col-md-4">
	                            	<div class="login-container">
		                            	<h1>User Guides</h1>
		                            	<ul className="landing-page-user-guides">
		                            		<li><a href={this.state.config.apiUrl+"/download/UserGuide/AAD_User_Onboarding_v1.0.pdf"} target="_blank">AAD User Onboarding</a></li>
		                            		<li><a href={this.state.config.apiUrl+"/download/UserGuide/Linux_&amp;_Linux+MiddleWare_v1.0.pdf"} target="_blank">Linux &amp; Linux+MiddleWare</a></li>
		                            		<li><a href={this.state.config.apiUrl+"/download/UserGuide/Linux_Oracle_v1.0.pdf"} target="_blank">Linux Oracle</a></li>
		                            		<li><a href={this.state.config.apiUrl+"/download/UserGuide/Linux_Server_Access_v1.0.pdf"} target="_blank">Linux Server Access</a></li>
		                            		<li><a href={this.state.config.apiUrl+"/download/UserGuide/Linux_Weblogic_v1.0.pdf"} target="_blank">Linux Weblogic</a></li>
		                            		<li><a href={this.state.config.apiUrl+"/download/UserGuide/Role_Based_Access_Management_v1.0.pdf"} target="_blank">Role Based Access Management</a></li>
		                            		<li><a href={this.state.config.apiUrl+"/download/UserGuide/Server_Details_&amp;_Operations_v1.0.pdf"} target="_blank">Server Details &amp; Operations</a></li>
		                            		<li><a href={this.state.config.apiUrl+"/download/UserGuide/Windows_MSSQL_v1.0.pdf"} target="_blank">Windows MSSQL</a></li>
		                            		<li><a href={this.state.config.apiUrl+"/download/UserGuide/Windows_Plain_&amp;_IIS_v1.0.pdf"} target="_blank">Windows Plain &amp; IIS</a></li>
		                            		<li><a href={this.state.config.apiUrl+"/download/UserGuide/Windows_Server_User_Access_v1.0.pdf"} target="_blank">Windows Server User Access</a></li>
	                            		</ul>
                            		</div>	
	                            </div>}
                            </React.Fragment>
                            :
                            (this.state.pageType == 1 ?
                                <div className="col-md-12" onKeyDown={this.submitFormForgotPassword}>
                                    <div className="login-container">
                                        <div className="card-body">
                                            <div className="card-block pt-0">
                                                <div className="form-horizontal">
                                                    <div className=" no-border text-center">
                                                        <h4 className="color-black"> {!this.state.passwordExpired ? "Forgot" : "Reset"} Password</h4>
                                                    </div>
                                                    <fieldset className="form-group position-relative">
                                                        <input type="text" required autoComplete="off"
                                                            className="form-control input-field input-md round"
                                                            placeholder="Registered Email Id" name="email" value={user.email} onChange={this.handleForgotPasswordChange} />
                                                    </fieldset>
                                                    <div className="row">
                                                        <div className="col-6">
                                                            <div className="login-text">
                                                                {!this.state.passwordExpired &&
                                                                    <div style={{ textDecoration: "underline" }} onClick={this.gotoLogin} className="font-weight-normal cursor-pointer-new">Login</div>}
                                                            </div>
                                                        </div>
                                                        <div className="col-6 text-right">
                                                            <button type="submit" onClick={this.handleForgotPasswordSubmit}
                                                                className={"btn btn-primary btn-md login-btn " + (forgotpassing ? "no-access" : "")} disabled={forgotpassing ? true : false}
                                                            >
                                                                {forgotpassing && (
                                                                    <i className="fas fa-circle-notch icon-loading"></i>
                                                                )}
                                                  Submit</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                :
                                (this.state.pageType == 2 ?
                                    <div className="col-md-6" onKeyDown={this.submitFormRegistration}>
                                        <div className="login-container">
                                            <div className="card-body">
                                                <div className="card-block pt-0">
                                                    <div className="form-horizontal">
                                                        <div className=" no-border text-center">
                                                            <h4 className="color-black">Sign Up Here</h4>
                                                        </div>
                                                        <div className="form-group position-relative">
                                                            <input type="text" className="form-control input-field input-md round"
                                                                placeholder="Company Name"
                                                                name="company_name" value={newUser.company_name}
                                                                onChange={this.handleRegisterChange}
                                                            />
                                                        </div>
                                                        <div className="form-group position-relative">
                                                            <input type="text" className="form-control input-field input-md round"
                                                                name="email" value={newUser.email}
                                                                onChange={this.handleRegisterChange}
                                                                placeholder="Email" />
                                                        </div>
                                                        <div className="form-group position-relative">
                                                            <input type="text" className="form-control input-field input-md round"
                                                                name="mobile" value={newUser.mobile}
                                                                onChange={this.handleRegisterChange}
                                                                placeholder="Mobile" />
                                                        </div>
                                                        <div className="form-group position-relative">
                                                            <input type="password" className="form-control input-field input-md round"
                                                                name="password" value={newUser.password}
                                                                onChange={this.handleRegisterChange}
                                                                placeholder="Password" />
                                                            <i data-tip data-for="reg_password_policy_hints" className="fa fa-info-circle txt-info-blue-icon" aria-hidden="true"></i>
                                                            <ReactTooltip id="reg_password_policy_hints" place="left" effect="solid">
                                                                <div className="password-policy-hints-wrapper pl-4 pt-1">
                                                                    <div className="position-relative mb-10px mt-1">
                                                                        <strong className="rounded-bullet-point-back-white">1</strong>
                                                            Password must contain <strong>min 14</strong> characters and <strong>max 32</strong> characters
                                                        </div>
                                                                    <div className="position-relative mb-10px mt-1">
                                                                        <strong className="rounded-bullet-point-back-white">2</strong>
                                                            Password must contain atleast <strong>3 alphabet characters</strong>
                                                                    </div>
                                                                    <div className="position-relative mb-10px mt-1">
                                                                        <strong className="rounded-bullet-point-back-white">3</strong>
                                                            Password must contain atleast <strong>one Small & Capital letter</strong> and <strong>one Number & special character</strong>
                                                                    </div>
                                                                    <div className="position-relative mb-10px mt-1">
                                                                        <strong className="rounded-bullet-point-back-white">4</strong>
                                                                        <strong>Space and . , ( ) %</strong> these special characters are <strong>not allowed</strong> in Password
                                                        </div>
                                                                    <div className="position-relative mb-10px mt-1">
                                                                        <strong className="rounded-bullet-point-back-white">5</strong>
                                                            Password must not contain more than 2 sequential repeated characters. eg: sm<strong>aaaa</strong>rr<strong>tttt</strong>, universa<strong>llll</strong>
                                                                    </div>
                                                                    <div className="position-relative mb-10px mt-1">
                                                                        <strong className="rounded-bullet-point-back-white">6</strong>
                                                            Password must not contain more than 2 sequential numbers and reverse numbers. eg: smart<strong>123456</strong>, smart<strong>654321</strong>
                                                                    </div>
                                                                    <div className="position-relative mb-10px mt-1">
                                                                        <strong className="rounded-bullet-point-back-white">7</strong>
                                                            Password must not contain more than 2 sequential alphabets and reverse alphabets. eg: smart<strong>abcdef</strong>, smart<strong>fedcba</strong>
                                                                    </div>
                                                                    <div className="position-relative mb-10px mt-1">
                                                                        <strong className="rounded-bullet-point-back-white">8</strong>
                                                            Password must not contain any common words like <strong>cloud4c, c4c, ctrls, ucp, myshift, welcome, password, admin and user name/mobile number</strong> and must not contain reverse of any common words also
                                                        </div>
                                                                </div>
                                                            </ReactTooltip>
                                                        </div>
                                                        <div className="form-group position-relative">
                                                            <input type="password" className="form-control input-field input-md round"
                                                                name="confirmpassword" value={newUser.confirmpassword}
                                                                onChange={this.handleRegisterChange}
                                                                placeholder="Confirm Password" />
                                                        </div>
                                                        <div className="row">
                                                            <div className="col-6">
                                                                <div className="login-text cursor-pointer-new"><div style={{ textDecoration: "underline" }} onClick={this.gotoLogin} className="font-weight-normal">Login</div></div>
                                                            </div>
                                                            <div className="col-6 text-right">
                                                                <button onClick={this.handleRegisterSubmit} type="submit"
                                                                    className={"btn btn-primary btn-md login-btn " + (registering ? "no-access" : "")} disabled={registering ? true : false}
                                                                >
                                                                    {
                                                                        registering && (
                                                                            <i className="fas fa-circle-notch icon-loading"></i>
                                                                        )}
                                                      Sign up</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    :
                                    (this.state.pageType == 3 ?
                                        <div className="col-md-6">
                                            <div className="login-container">
                                                <div className="card-body">
                                                    <div className="card-block pt-0">

                                                        {!this.state.questions ?
                                                            <form className="form-horizontal" novalidate>
                                                                <div className=" no-border text-center">
                                                                    <h4 className="color-black">Reset Password</h4>
                                                                </div>
                                                                <div className="form-group position-relative">
                                                                    <input className="form-control input-field input-md round"
                                                                        autoComplete="new-password"
                                                                        name="newPassowrd"
                                                                        type="password"
                                                                        value={resetPassword.newPassowrd}
                                                                        onChange={this.resetPswdChange}
                                                                        placeholder="Enter New Password" />
                                                                    <i data-tip data-for="reset_password_policy_hints" className="fa fa-info-circle txt-info-blue-icon" aria-hidden="true"></i>
                                                                    <ReactTooltip id="reset_password_policy_hints" place="left" effect="solid">
                                                                        <div className="password-policy-hints-wrapper pl-4 pt-1">
                                                                            <div className="position-relative mb-10px mt-1">
                                                                                <strong className="rounded-bullet-point-back-white">1</strong>
                                                            Password must contain <strong>min 14</strong> characters and <strong>max 32</strong> characters
                                                        </div>
                                                                            <div className="position-relative mb-10px mt-1">
                                                                                <strong className="rounded-bullet-point-back-white">2</strong>
                                                            Password must contain atleast <strong>3 alphabet characters</strong>
                                                                            </div>
                                                                            <div className="position-relative mb-10px mt-1">
                                                                                <strong className="rounded-bullet-point-back-white">3</strong>
                                                            Password must contain atleast <strong>one Small & Capital letter</strong> and <strong>one Number & special character</strong>
                                                                            </div>
                                                                            <div className="position-relative mb-10px mt-1">
                                                                                <strong className="rounded-bullet-point-back-white">4</strong>
                                                                                <strong>Space and . , ( ) %</strong> these special characters are <strong>not allowed</strong> in Password
                                                        </div>
                                                                            <div className="position-relative mb-10px mt-1">
                                                                                <strong className="rounded-bullet-point-back-white">5</strong>
                                                            Password must not contain more than 2 sequential repeated characters. eg: sm<strong>aaaa</strong>rr<strong>tttt</strong>, universa<strong>llll</strong>
                                                                            </div>
                                                                            <div className="position-relative mb-10px mt-1">
                                                                                <strong className="rounded-bullet-point-back-white">6</strong>
                                                            Password must not contain more than 2 sequential numbers and reverse numbers. eg: smart<strong>123456</strong>, smart<strong>654321</strong>
                                                                            </div>
                                                                            <div className="position-relative mb-10px mt-1">
                                                                                <strong className="rounded-bullet-point-back-white">7</strong>
                                                            Password must not contain more than 2 sequential alphabets and reverse alphabets. eg: smart<strong>abcdef</strong>, smart<strong>fedcba</strong>
                                                                            </div>
                                                                            <div className="position-relative mb-10px mt-1">
                                                                                <strong className="rounded-bullet-point-back-white">8</strong>
                                                            Password must not contain any common words like <strong>cloud4c, c4c, ctrls, ucp, myshift, welcome, password, admin and user name/mobile number</strong> and must not contain reverse of any common words also
                                                        </div>
                                                                        </div>
                                                                    </ReactTooltip>
                                                                </div>
                                                                <fieldset className="form-group position-relative">
                                                                    <input className="form-control input-field input-md round"
                                                                        autoComplete="new-password"
                                                                        name="confirmPassowrd"
                                                                        type="password"
                                                                        value={resetPassword.confirmPassowrd}
                                                                        onChange={this.resetPswdChange}
                                                                        placeholder="Confirm New Password" />
                                                                </fieldset>
                                                                <div className="random-psw-gentr-wrapper mb-2">
                                                                    <div onClick={this.pswdGeneratorClick} className="random-psw-gentr-header">
                                                                        Random Password Generator
                                                        <i className="fas fa-angle-down random-psw-gentr-icon-right"></i>
                                                                    </div>
                                                                    {this.state.pswdGeneratorShow &&
                                                                        <div className="generated-password-display-wrapper form-control input-field-capcha input-md round random-psw-gentr-container">
                                                                            <span>{this.state.autoGeneratedPassword}</span><i onClick={this.autoGeneratedPasswordClick} className="fas fa-sync btn-refresh-captcha"></i>
                                                                        </div>
                                                                    }
                                                                </div>
                                                                <div className="row">
                                                                    <div className="col-6">
                                                                        <div className="login-text">
                                                                            <div style={{ paddingLeft: "5px", textDecoration: "underline" }} onClick={this.gotoLogin} className="font-weight-normal cursor-pointer-new">Login</div>
                                                                        </div>
                                                                    </div>
                                                                    <div className="col-6 text-right">
                                                                        <button onClick={this.resetPasswordClick} type="submit" className=" btn btn-primary btn-md login-btn">
                                                                            {this.state.reset_pswd_request_inprocess && (
                                                                                <i className="fas fa-circle-notch icon-loading"></i>
                                                                            )}Update</button>
                                                                    </div>
                                                                </div>
                                                               
                                                            </form>
                                                            : <div>
                                                                <div className=" no-border text-center">
                                                                    <h5 className="color-black">Answer Security Questions to Reset Password</h5>
                                                                </div>
                                                                <form onSubmit={this.validateSecurityQuestions} >
                                                                   
                                                                    {this.state.newQuestions ? <p className="text-center">Please verify new questions</p>:""}
                                                                    {this.state.randomQuestions && this.state.randomQuestions.length > 0 ? this.state.randomQuestions.map((question, index) => {
                                                                        return (<React.Fragment>
                                                                            <span>Q{index + 1} .{question.question}</span>
                                                                            <br />
                                                                            <input type="text" className="form-control input-field input-md round" id={question.question_id} name={question.question_id} />
                                                                            <br />
                                                                        </React.Fragment>)

                                                                    }) : ""}
                                                                    <button className="btn btn-primary btn-md login-btn">Submit</button>
                                                                
                                                                </form>

                                                            </div>}
                                                    </div>
                                                </div>
                                            </div>
                                        </div> : (this.state.pageType == 4 ?
                                            <div className="col-md-6">
                                                <div className="login-container">
                                                    <div className="card-body">
                                                        <div className="card-block pt-0">
                                                            <form className="form-horizontal" novalidate
                                                                onKeyDown={this.submitFormOTP}
                                                            >
                                                                <div className=" no-border text-center">
                                                                    <h4 className="color-black">Dual Security Check!</h4>
                                                                </div>
                                                                <fieldset className="form-group position-relative">
                                                                    <input type="text" className="form-control input-field input-md round"
                                                                        id="txt_login_otp"
                                                                        placeholder="Enter OTP" />
                                                                    {!this.state.resendClicked &&
                                                                        <div className="success-text">
                                                                            OTP has sent to Registered Email and Mobile !
                                                    </div>}
                                                                </fieldset>
                                                                <div className="row">
                                                                    <div className="col-12 text-right">
                                                                        {!this.state.hideResendOtp &&
                                                                            <button onClick={this.resendOTPClick} type="submit" className={"btn btn-small-link float-left " +
                                                                                ((this.state.otp_resent_request_inprocess || this.state.setIntCount > 0) ? "no-access" : "")}
                                                                                disabled={(this.state.otp_resent_request_inprocess || this.state.setIntCount > 0) ? true : false}
                                                                            >
                                                                                {this.state.otp_resent_request_inprocess && (
                                                                                    <i className="fas fa-circle-notch icon-loading"></i>
                                                                                )} {this.state.setIntCount > 0 ? '00:' + (this.state.setIntCount < 10 ? '0' : '') + this.state.setIntCount + ' - ' : ""} Resend OTP</button>
                                                                        }
                                                                        <button onClick={this.loginWithOTPClick}
                                                                            type="submit"
                                                                            className={"btn btn-primary btn-md login-btn " + (this.state.login_request_inprocess ? "no-access" : "")} disabled={this.state.login_request_inprocess ? true : false}
                                                                        >
                                                                            {this.state.login_request_inprocess && (
                                                                                <i className="fas fa-circle-notch icon-loading"></i>
                                                                            )}Login Now</button>
                                                                    </div>
                                                                </div>
                                                            </form>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div> : (this.state.pageType == 5 ?
                                                <div className="col-md-6">
                                                    <div className="login-container">
                                                        <div className="card-body">
                                                            <div className="card-block pt-0">
                                                                <form className="form-horizontal" novalidate>
                                                                    <div className=" no-border text-center">
                                                                        <h4 className="color-black">Security Check With Google Authenticator!</h4>
                                                                    </div>
                                                                    {this.state.qrcode ?
                                                                        <React.Fragment>
                                                                            <div>
                                                                                <div className="position-relative pb-2 ml-5 mt-2">
                                                                                    <span className="rounded-bullet-point">1</span> Download Google Authenticator App in Mobile
                                                            </div>
                                                                                <div className="position-relative pb-2 ml-5">
                                                                                    <span className="rounded-bullet-point">2</span> Sync time in Google Authenticator App Settings
                                                            </div>
                                                                                <div className="position-relative pb-2 ml-5">
                                                                                    <span className="rounded-bullet-point">3</span> Scan below QR Code
                                                            </div>
                                                                                <div className="position-relative pb-2 ml-5">
                                                                                    <span className="rounded-bullet-point">4</span> Enter Secret Key and Login
                                                            </div>
                                                                            </div>
                                                                            <div className="text-center mt-0">
                                                                                <img src={this.state.qrcode} />
                                                                            </div>
                                                                        </React.Fragment>
                                                                        :
                                                                        <React.Fragment>
                                                                            <div>
                                                                                <div className="position-relative pb-2 ml-5 mt-2">
                                                                                    <span className="rounded-bullet-point">1</span> Open Google Authenticator App in Mobile
                                                            </div>
                                                                                <div className="position-relative pb-2 ml-5">
                                                                                    <span className="rounded-bullet-point">2</span> Enter Secret Key and Login
                                                            </div>
                                                                                <div className="position-relative pb-2 ml-5">
                                                                                    <span className="rounded-bullet-point">3</span> In case incorrect Google Auth then "Enter New Secret Key" <i className="pr-1 pl-1">or</i> "Sync time in Google Authenticator App Settings"
                                                            </div>
                                                                                <div className="position-relative pb-2 ml-5">
                                                                                    <span className="rounded-bullet-point">4</span> If you forgot/lost your mobile <i className="pr-1 pl-1">or</i> not able to proceed, Then "Reset QR Code" below!
                                                            </div>
                                                                            </div>
                                                                        </React.Fragment>
                                                                    }
                                                                    <fieldset className="form-group position-relative mt-2">
                                                                        <input type="text" className="form-control input-field input-md round"
                                                                            id="txt_login_Secret_Key"
                                                                            onKeyDown={this.keyDownEnterSecretKey}
                                                                            placeholder="Enter Secret Key" />
                                                                        {!this.state.qrcode &&
                                                                            <div className="success-text">
                                                                                New Secret Key will generate for every 30 seconds in Google Authenticator App!
                                                            </div>
                                                                        }
                                                                    </fieldset>
                                                                    <div className="row">
                                                                        <div className="col-12">
                                                                            {!this.state.qrcode &&
                                                                                <button onClick={this.resetWithQRCodeClick}
                                                                                    type="submit" className="btn btn-small-link float-left">Reset QR Code</button>
                                                                            }

                                                                            <button onClick={this.loginWithQRCodeClick}
                                                                                type="submit"
                                                                                className={"float-right btn btn-primary btn-md login-btn " + (this.state.login_request_inprocess ? "no-access" : "")} disabled={this.state.login_request_inprocess ? true : false}
                                                                            >
                                                                                {this.state.login_request_inprocess && (
                                                                                    <i className="fas fa-circle-notch icon-loading"></i>
                                                                                )}Login Now</button>
                                                                        </div>
                                                                    </div>
                                                                </form>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div> : (this.state.pageType == 6 ?
                                                    <div className="col-md-6">
                                                        <div className="login-container">
                                                            <div className="card-body">
                                                                <div className="card-block pt-0">
                                                                    <form className="form-horizontal" novalidate>
                                                                        <div className=" no-border text-center">
                                                                            <h4 className="color-black">Reset Google Authenticator QR Code</h4>
                                                                        </div>
                                                                        <fieldset className="form-group position-relative mt-2">
                                                                            <input type="text" className="form-control input-field input-md round"
                                                                                id="txt_otp_reset_QRCode"
                                                                                placeholder="Enter OTP" />
                                                                            {this.state.otp_resent_request_inprocess == 0 &&
                                                                                <div className="request-inprocess-text">
                                                                                    <i className="fas fa-circle-notch icon-loading"></i>
                                                                OTP is sending to Registered Email and Mobile !
                                                            </div>
                                                                            }
                                                                            {this.state.otp_resent_request_inprocess == 2 &&
                                                                                <div className="success-text">
                                                                                    OTP has sent to Registered Email and Mobile !
                                                            </div>
                                                                            }
                                                                        </fieldset>
                                                                        <div className="row">
                                                                            <div className="col-12">
                                                                                <button onClick={this.resetQRCodeClick}
                                                                                    type="submit"
                                                                                    className={"float-right btn btn-primary btn-md login-btn " + (this.state.reset_qrcode_request_inprocess ? "no-access" : "")} disabled={this.state.reset_qrcode_request_inprocess ? true : false}
                                                                                >
                                                                                    {this.state.reset_qrcode_request_inprocess && (
                                                                                        <i className="fas fa-circle-notch icon-loading"></i>
                                                                                    )}Reset QR Code Now</button>
                                                                            </div>
                                                                        </div>
                                                                    </form>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div> : ""))
                                        ))
                                )
                            )
                        }
                    </div>
                </div>
            </React.Fragment>
        );
    }
}

function mapStateToProps(state) {
    const { loggingIn } = state.authentication;
    const { registering } = state.registration;
    const { forgotpassing } = state.forgotpass;
    return {
        loggingIn,
        registering,
        forgotpassing
    };
}

const connectedLoginPage = connect(mapStateToProps)(LoginPage);
export { connectedLoginPage as LoginPage };